-------------------
MULTITHREADING
-------------------
1) What Is Multi Tasking?

2) What Is Multi ThreadingAnd Explain Its Application Areas?

3) What Is Advantage Of Multi Threading?

4) When Compared With C++ What Is The Advantage In Java With Respect To Multi Threading?

5) In How Many Ways We Can Define A Thread?

6) Among Extending Thread And Implementing Runnable Which Approach Is Recommended?

7) Difference Between t.start() And t.run()?

8) Explain About Thread Scheduler?

9) If We Are Not Overriding run() What Will Happen?

10) Is It Possible Overloading Of run()?

11) Is It Possible To Override a start() And What Will Happen?

12) Explain Life Cycle Of A Thread?

13) What Is The Importance Of Thread Class start()?

14) After Starting A Thread If We Try To Restart The Same Thread Once Again What Will Happen?

15) Explain Thread Class Constructors?

16) How To Get And Set Name Of A Thread?

17) Who Uses Thread Priorities?

18) Default Priority For Main Thread?

19) Once We Create A New Thread What Is Its Priority?

20) How To Get Priority From Thread And Set Priority To A Thread?

21) If We Are Trying To Set Priority Of Thread As 100, What Will Happen?

22) If 2 Threads Having Different Priority Then Which Thread Will Get Chance First For Execution?

23) If 2 Threads Having Same Priority Then Which Thread Will Get Chance First For Execution?

24) How We Can Prevent Thread From Execution?

25) What Is yield() And Explain Its Purpose?

26) Is Join Is Overloaded?

27) Purpose Of sleep()?

28) What Is synchronized Key Word? Explain Its Advantages And Disadvantages?

29) What Is Object Lock And When It Is Required?

30) What Is A Class Level Lock When It Is Required?

31) While A Thread Executing Any Synchronized Method On The Given Object Is It Possible To Execute Remaining Synchronized 
Methods On The Same Object Simultaneously By Other Thread?

32) Difference Between Synchronized Method And Static Synchronized Method?

33) Advantages Of Synchronized Block Over Synchronized Method?

34) What Is Synchronized Statement?

35) How 2 Threads Will Communicate With Each Other?

36) wait(), notify(), notifyAll() Are Available In Which Class?

37) Why wait(), notify(), notifyAll() Methods Are Defined In Object Instead Of Thread Class?

38) Without Having The Lock Is It Possible To Call wait()?

39) If A Waiting Thread Gets Notification Then It Will Enter Into Which State?

40) In Which Methods Thread Can Release Lock?

41) Explain wait(), notify() and notifyAll()?

42) Difference Between notify() and notifyAll()?

43) Once A Thread Gives Notification Then Which Waiting Thread Will Get A Chance?

44) How A Thread Can Interrupt Another Thread?

45) What Is Deadlock? Is It Possible To Resolve Deadlock Situation?

46) Which Keyword Causes Deadlock Situation?

47) How We Can Stop A Thread Explicitly?

48) Explain About suspend() And resume()?

49) What Is Starvation And Explain Difference Between Deadlock and Starvation?

50) What Is Race Condition?

51) What Is Daemon Thread? Give An Example Purpose Of Daemon Thread?

52) How We Can Check Daemon Nature Of A Thread? Is It Possible To Change Daemon Nature Of A Thread? Is Main Thread Daemon OR 
Non-Daemon?

53) Explain About ThreadGroup?

54) What Is ThreadLocal?
-----------------------------------------
-----------------------------------------
1. What is a thread?

2. What is multithreading; explain when should we develop multithreading?

3. What are the advantages of multithreading? 4. Give different real world applications of multithreading?

5. What is the difference between sequential, parallel and concurrent flow of execution?

6. What is the difference between multitasking and multithreading? 

7. How many threads are created by default in JVM?

8. Is Java by default multithreaded programming language?

9. How can we execute multiple tasks concurrently- 

10. What are the different ways we have to create custom thread?

11. What are the steps we must follow in creating custom thread extending from Thread class and implementing from Runnable interface?

12. Why custom thread implementing from Runnable interface approach is recommended?

13. What is the use of start() method & run() method?

14. When we call start method, will thread execution started immediately?

15. How can we execute logic in custom thread & main thread? 

16. What will happen if we do not override run() method? 

17. What is the mandatory way to override run() method in the below cases ?
	1) When extends from Thread class? 
	2) When implementing from Runnable interface?
	3) extends from Thread class & also implementing Runnable interface 

18. Can we overload run() method, then will it be executed? 

19. If we only overload run() method, in which case we get CE?
	1) Subclass is derived from Thread class? 
	2) Subclass is derived from Runnable interface?
	3) Subclass is derived from Thread class & also from Runnable interface?

20. Can we override start() method in Thread subclass? 
	1) If we override start() method, will custom thread created?
	2) What is the right design to override start() method? 
	3) What is situation force us to override start() method?

21. What is the meaning of single thread model and multithread model application? 

22. Can we call run method directly, if so what will happen?

23. What is the difference between th.start() & th.run()?

24. Can we call run and start method both at a time, if so what will happened?

25. Is it possible to start a thread more than once? 

26. How can we create multiple custom threads? 

27. Explain lifecycle phases of a thread?

28. What is the meaning of active thread & live thread?

29. How can we find how many active threads exist in JVM? 

30. How can we find a given thread is live thread or not? 

31. we call yield() method in which state thread will enter?

32. What are the algorithms used in Threads execution process?
	1) Will a newly born thread enter into running state directly? 
	2) From block state will thread directly enter into running state?

33. What is thread priority?
	1) What is the default priority of every new thread?
	2) What is the priority of main thread?
	3) Why every thread default priority is 5?
	4) What is the range of thread priority?
	5) How can we get & set thread's priority?
	6) What will happen when we set thread priority to 15?
	7) If two threads have different priority which thread will	execute first?
	8) If two threads have same priority which thread will execute first? 
	9) When a new thread is born, how can we start its execution immediately?

34. Explain thread class constructors Thread() & Thread(String)? 

35. What is the default name of the thread?
	1) How can we get thread name? 
	2) What are the different ways we can change the default name of the thread?

36. Can we change name & priority of thread after it is started? 

37. What is the meaning of currently running thread & current thread object?
	1) How can we get currently running thread reference? 2) In the below cases which thread object reference is return
		i. Thread.currentThread() is placed in main method
		ii. Thread.currentThread() is placed in run() method 
		iii. Thread.currentThread() is placed in m1() method
	3) If we place th.run() method call in main method, what is the currently running thread object & current thread object of run() method?
	4) What is the output printed for the below statements in run() method when we call run() method from main method 
		i. Thread.currentThread().getName() 
		ii. this.getName();
	5) Can we change main thread name & priority, write code for it? Text 
	6) Write a program to prove static block is executed in main thread?

38. What is the meaning of thread group?
	1) What is the default group?
	2) How can we get thread group name?
	3) How can we create our own group for custom threads?

39. What is printed when a thread class object is printed? 

40. How many types of threads we can create in JVM?
	1) What is a Non-daemon daemon thread? 
	2) What is a Daemon thread?
	3) JVM wait for which thread to complete? 
	4) Why main thread is a non-daemon thread?
	5) Why gc is a daemon thread? 
	6) Why every custom thread is created as non-daemon thread?
	7) How can we create a custom thread as daemon thread?
	8) What is the rule in calling setDaemon() method?
	9) Is it possible to change the demon property after starting thread?
	10) If we create custom thread as daemon can we guarantee its full execution?
	11) How can we find the given thread is a daemon or not?

41. What are the different ways to pause thread execution? 		
	1) How can we pause thread execution to allow other thread to execute?
	2) What is the difference between yield() & sleep() methods?
	3) How can we pause a thread execution until some other thread execution is completed? 
	4) What is the difference between join() & join(5) & sleep(5)?
	5) Why suspend() & resume() methods are deprecated?

42. Explain the use of below Thread class methods?
	1) start()  			2) run()
	3) isAlive() 			4) activeCount()
	5) setName(String)      6) getName()
	7) setPriority(int)		8) getPriority()
	9) currentThread()		10) toString()
	11) set Daemon(true) 	12) IsDaemon()
	13) yield()				14) sleep(int)
	15) join()				16) join (int)
	17) Interrupt()			18) interrupted()
	19) isInterrupted()

43. What is synchronization?
	1) When should we develop synchronization? 
	2) Explain different applications area of synchronization?
	3) How can we develop synchronization in Java?
	4) Synchronized keyword either applied to method or object? 
	5) What JVM will do when we call synchronized method?
	6) What is meaning of object lock & class lock?
	7) When a thread is called as monitor? 
	8) When will the object is unlocked?
	9) How JVM will mark an object is locked & unlocked?
	10) When an object is locked by a thread,
		i. Can we use it to call synchronized method from other thread? 
		ii. Can we use it to call non-synchronized method from other thread?
	11) How can we lock argument object of method? 
	12) What are the differences between synchronized method &	synchronized block?
	13) What are the advantages of synchronized block over synchronized method?
	14) What is the difference in declaring static & non-static method as synchronized?
	15) Can we define multiple synchronized blocks in a method
	16) When should we develop multiple synchronized blocks Instead of declaring contestete method as synchronized?
	17) If threads use different objects, will synchronization applled?	
	18) What is meaning of thread-safe & non-thread safe objects? 
	19) How can we develop thread-safe objects?
	20) Create BankAccount object to solve data corruption problem? 
	21) Create Train object in multithreading environment to issue thickets?
	22) What is the difference between volatile & synchronized keywords?

44. What is a deadlock?
	1) When will we get deadlock situation? 
	2) What is the keyword causes deadlock?
	3) What is the difference between deadlock & starvation? 
	4) Given me different code snippets to get deadlock?
	5) How can we overcome from deadlock situation?

45. What is Inter thread communication?
	1) How two thread can communicate? 
	2) In addition to synchronized method what else we should use?
	3) What is the use of wait(), notify() & notifyAll() methods? 
	4) What is the code template to develop inter thread communication? 
	5) When should we develop two threads with communication?
	6) Develop code for Producer-Consumer application? 
	
46. Why wait, notify & notifyAll are defined in Object class, but not in Thread class?

47. What are the various rules we must follow in calling wait(), notify() & notifyAll()?
	1) What is the exception we must handle in calling wait() method?
	2) Can we call these three methods in a non-synchronized method?
	3) If we call these three methods in a non-synchronized method, Why it leads to exception ation Illegal Monitor StateException 
	4) Even if notify()/notifyAll() methods are not called how can we bring out the thread from waiting state?
	5) If we call wait(100), will thread starts its execution immediately after 100 milliseconds?
	6) What is the difference between wait() & wait(100)? 
	7) What is the difference between sleep(100), join(100) & wait(100)?

48. What is inline thread?

49. What is the use of ThreadGroup class? 

50. How can we add our threads to our custom thread group?

51. What is the use of ThreadLocal class?



Q35. What is Multithreading?
Ans.Executing several tasks at a time, where each task is a separate independent part of a same process. Each separate independent part of a
program is called as a Thread. In short the process of executing multiple threads simultaneously is known as multithreading.
Q36. How can we create a thread in java and which is the recommended way?
Ans.There are following two ways of creating a thread:
1) By Implementing Runnable interface.
2) By Extending Thread class.
Implementing Runnable interface is the recommended way to create a Thread.
Update Your Skills form Our Experts: Core Java Online Training
Q37. What is di􀃡erence between wait and sleep methods in java?
Ans.sleep():It is a static method on Thread class. It makes the current thread into the “Not Runnable” state for speci􀃕ed amount of time. During this
time, the thread keeps the lock (monitors) it has acquired.
wait(): It is a method on Object class. It makes the current thread into the “Not Runnable”state. Wait is called on a object, not a thread. Before calling
wait() method, the object should be synchronized, means the object should be inside synchronized block. The call to wait() releases the acquired lock.
Q38. What is di􀃡erence between yield and sleep?
Ans. yield() – It causes the currently executing thread object to temporarily pause and allow other threads to execute.
sleep() – It causes the current thread to suspend execution for a speci􀃕ed period. When a thread goes into sleep state it doesn’t release the lock.

Q35. What is multi-threading?
Ans: Multi threading is a programming concept to run multiple tasks in a concurrent manner within a single program. Threads share same process
stack and running in parallel. It helps in performance improvement of any program.
Q36. Why Runnable Interface is used in Java?
Ans: Runnable interface is used in java for implementing multi threaded applications. Java.Lang.Runnable interface is implemented by a class to
support multi threading.
Update Your Skills form Our Experts: Core Java Online Training
Q37. What are the two ways of implementing multi-threading in Java?
Ans: Multi threaded applications can be developed in Java by using any of the following two methodologies:
1. By using Java.Lang.Runnable Interface. Classes implement this interface to enable multi threading. There is a Run() method in this interface
which is implemented.
2. By writing a class that extend Java.Lang.Thread class.


Q44. In multi-threading how can we ensure that a resource isn’t used by multiple threads
simultaneously?
Ans: In multi-threading, access to the resources which are shared among multiple threads can be controlled by using the concept of synchronization.
Using synchronized keyword, we can ensure that only one thread can use shared resource at a time and others can get control of the resource only
once it has become free from the other one using it.

Q58. Describe di􀃡erent states of a thread.
Ans: A thread in Java can be in either of the following states:
Ready: When a thread is created, it’s in Ready state.
Running: A thread currently being executed is in running state.
Waiting: A thread waiting for another thread to free certain resources is in waiting state.
Dead: A thread which has gone dead after execution is in dead state.

Q81. In Java thread programming, which method is a must implementation for all threads?
Ans: Run() is a method of Runnable interface that must be implemented by all threads.

Q82. I want to control database connections in my program and want that only one thread should be
able to make database connection at a time. How can I implement this logic?
Ans: This can be implemented by use of the concept of synchronization. Database related code can be placed in a method which hs synchronized
keyword so that only one thread can access it at a time.

3 Java Threads 6
3.1 What is the difference between processes and threads ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3.2 Explain different ways of creating a thread. Which one would you prefer and why ? . . . . . . . . . . . . . . . . 6
3.3 Explain the available thread states in a high-level. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3.4 What is the difference between a synchronized method and a synchronized block ? . . . . . . . . . . . . . . . . 7
3.5 How does thread synchronization occurs inside a monitor ? What levels of synchronization can you apply ? . . . 7
3.6 What’s a deadlock ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.7 How do you ensure that N threads can access N resources without deadlock ? . . . .

83) What is process ? ...................................................................................................................... 22
84) What is thread in java? .......................................................................................................... 22
85) Difference between process and thread? ........................................................................ 22
86) What is multitasking ? ............................................................................................................ 22
87) What are different types of multitasking? ....................................................................... 22
88) What are the benefits of multithreaded programming? ........................................... 23
89) Explain thread in java? ........................................................................................................... 23
90) List Java API that supports threads? ................................................................................. 23
4
91) Explain about main thread in java? ....................................................................................... 23
92) In how many ways we can create threads in java? ....................................................... 23
93) Explain creating threads by implementing Runnable class? .................................... 23
94) Explain creating threads by extending Thread class ? ............................................... 23
95) Which is the best approach for creating thread ? ........................................................ 24
96) Explain the importance of thread scheduler in java? ................................................... 24
97) Explain the life cycle of thread? .......................................................................................... 24
98) Can we restart a dead thread in java? ............................................................................. 24
99) Can one thread block the other thread? .......................................................................... 24
100) Can we restart a thread already started in java? ..................................................... 24
101) What happens if we don’t override run method ? ........................................................ 24
102) Can we overload run() method in java? ........................................................................ 24
105) What is a lock or purpose of locks in java? .................................................................. 24
106) In how many ways we can do synchronization in java? ......................................... 25
107) What are synchronized methods ? .................................................................................. 25
108) When do we use synchronized methods in java? ......................................................... 25
109) When a thread is executing synchronized methods , then is it possible to
execute other synchronized methods simultaneously by other threads? ...................... 25
110) When a thread is executing a synchronized method , then is it possible for the
same thread to access other synchronized methods of an object ? .................................. 25
111) What are synchronized blocks in java? .............................................................................. 25
112) When do we use synchronized blocks and advantages of using synchronized
blocks? ...................................................................................................................................................... 25
113) What is class level lock ? ......................................................................................................... 26
114) Can we synchronize static methods in java? ................................................................. 26
115) Can we use synchronized block for primitives? ............................................................. 26
116) What are thread priorities and importance of thread priorities in java? ............. 26
117) Explain different types of thread priorities ? ............................................................... 26
118) How to change the priority of thread or how to set priority of thread? ............... 26
119) If two threads have same priority which thread will be executed first ? ............. 26
120) What all methods are used to prevent thread execution ? ..................................... 26
121) Explain yield() method in thread class ? ........................................................................... 26
122) Is it possible for yielded thread to get chance for its execution again ? ............. 27
5
123) Explain the importance of join() method in thread class? ..................................... 27
124) Explain purpose of sleep() method in java? ................................................................... 27
125) Assume a thread has lock on it, calling sleep() method on that thread will
release the lock? ................................................................................................................................... 28
126) Can sleep() method causes another thread to sleep? ............................................. 28
127) Explain about interrupt() method of thread class ? .................................................. 28
128) Explain about interthread communication and how it takes place in java? ....... 28
129) Explain wait(), notify() and notifyAll() methods of object class ? ......................... 28
130) Explain why wait() , notify() and notifyAll() methods are in Object class rather
than in thread class? ........................................................................................................................... 28
131) Explain IllegalMonitorStateException and when it will be thrown? ......................... 28
132) when wait(), notify(), notifyAll() methods are called does it releases the lock
or holds the acquired lock? ............................................................................................................... 28
133) Explain which of the following methods releases the lock when yield(),
join(),sleep(),wait(),notify(), notifyAll() methods are executed? ...................................... 28
134) What are thread groups? ....................................................................................................... 29
135) What are thread local variables ? ........................................................................................ 29
136) What are daemon threads in java? ..................................................................................... 29
137) How to make a non daemon thread as daemon? .......................................................... 29
138) Can we make main() thread as daemon? ....................................................................... 2